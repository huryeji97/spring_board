<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 
* namespace : 주로 dao 클래스의 sqlSession과 연결하기 위한 키로 사용
* DB 쿼리작성
- id : 주로 dao 클래스의 sqlSession의 함수와 연결하기 위해 사용
- ${컬럼이름} : mybatis-config.xml의 property의 name과 매칭. DB테이블의 열
- #{컬럼이름} : dao 클래스의 sqlSession에서 전송받은 데이터(입력받은 데이터)
* mapper 태그
- <insert>, <select>, <update>, <delete>
- sqlSession의 함수(insert, selectOne, selectList, update, delete)에 맞게 수행되는 태그
-->
<mapper namespace="edu.spring.ex02.BoardMapper">
	<!-- 게시글 등록 -->
	<insert id="insert">
		insert into ${board} (${title}, ${content}, ${userId})
		values (#{title}, #{content}, #{userId})
	</insert>
	
	<!-- 페이지 처리한 게시글 목록 -->
	<!--select_all의 리턴타입은 원래 List<BoardVO>이지만, 데이터 컬럼만 보았을 때는 VO타이다. -->
	<select id="select_all_paging" resultType="BoardVO">
		select ${boardSeq}
			   , ${title}
			   , ${content}
			   , ${userId}
			   , ${regDate} 
		  from ${board}
		order by ${boardSeq} desc
		limit #{pageStart}, #{perPageNum}
		<!--
		* pageStart : 특정 페이지의 첫번째 게시글 행
		* perPageNum : 한 페이지당 보여줄 게시글의 갯
		-->
	</select>
	
	<!-- 선택한 boardSeq 게시글 보 -->
	<select id="select_by_board_seq" resultType="BoardVO">
		select * 
		  from ${board}
		 where ${boardSeq} = #{boardSeq}
	</select>
	
	<!-- 게시글 수 -->
	<update id="update">
		update ${board}
		   set ${title} = #{title}
			   , ${content} = #{content}
		 where ${boardSeq} = #{boardSeq}
	</update>
	
	<!-- 게시글 삭제 -->
	<delete id="delete">
		delete from ${board}
		where ${boardSeq} = #{boardSeq}
	</delete>
	
	<!-- 전체 게시글 수 -->
	<select id="total_count" resultType="Integer">
		select count(*) as total_count
		from ${board}
	</select>
</mapper>
